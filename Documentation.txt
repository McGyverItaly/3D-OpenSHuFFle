"3d-SHuFFle" OpenEuphoria program, version 1.0
"SHell-HUll File Format 1.0" --> ".shuf" extension
"Rotating Sections File 1.0" --> ".rot" extension

Shuffle is a program that converts a ".shuf" file descriptor into an Openscad ".scad" file. This file contains a number of Openscad Polyhedron, that all together compose the object/shell/hull described in the ".shuf" file. The ".rot" file, if used, can rotate the sections to simplify the design process of very complex objects.

Copyright (C) 2020 Claudio Emiliozzi, Italy

This program (and correlated file formats) is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Q.: Why a new program (in a different language, too), if exists OpenSCAD code that do something similar?
A.: Because OpenSCAD, altough being a consistent graphic language, isn't so flexible to do a classic GUI with buttons, lists and edit-text fields, that sometimes could be useful. Moreover, some matematical operations (and correlated data-managing) that are tricky under OpenSCAD, become very simple in Euphoria.
Q.: Why the need of the "*.shuf" and ".rot" file format?
A.: The reason behind these new file formats derive from the difficault to use the minkowski() function in Openscad. If you want to make a shell, the first idea is: I make a solid object, with minkowski() I swell it up a little, then with difference() I can subtract the second from the first. The drawback is the time needed by OpenSCAD to perform this few operations: it increases very fast with the complexity of the object, so you will leave this way very soon.
If you have got a "*.shuf" file of the exterior of a thin shell object, it's not so difficault to make the interior simply using a text editor. I hope to automate this process soon.
Q.: Why to use older versions of Euphoria and Win32Lib than the last ones?
A.: Euphoria 3.1.1 is a very robust development environment, with no bug apparently. It's simple to develop code that don't make surprises, mainly in the bad sense. Win32Lib is a worthy counterpart of Euphoria; the only serious flaw of wich I have proofs occur when unfreezing the PC with an application opened: sometimes you get a lot of "crazy" dialog box...
Not every match Euphoria-Win32Lib gets success, but Eu. 3.1.1 with Win32Lib 0.45r does: it's enough.


==========================>>>>>> ".shuf" file <<<<<<==========================

Basically, the ".shuf" file is a sequence of "sections", in other word:

#start
X11 Y11 Z11
X12 Y12 Z12
...
...
X1n Y1n Z1n
#2
X21 Y21 Z21
X22 Y22 Z22
...
...
X2n Y2n Z2n
.
.
#m
Xm1 Ym1 Zm1
Xm2 Ym2 Zm2
...
...
Xmn Ymn Zmn
#end

Every section, composed of lists of coordinates (where the number "n" is a constant in the sections of a single file), is the contour of a geometric section of the shell/hull that you are trying to represent. For section = 1 ("#start" section) you describe the first face of the shell, for section = m the last face. Every other section describes a face of tubular envelopes that connects section X points and section X-1 points. The envelope is composed by triangles. Obviously, the sections are very simpler to design if they lie on a plane parallel to the XY, XZ or YZ planes. In the following the sections are parallel to the XZ plane:

#start
X11 Y1 Z11
X12 Y1 Z12
...
...
X1n Y1 Z1n
#2
X21 Y2 Z21
X22 Y2 Z22
...
...

It's important: Y1...Yn should be an increasing (or decreasing) sequence .
Beware: caps matter! The X11....Zmn are numeric value: algebraic expressions not admitted. The numbers after the section separator "#" can be omitted, or substituted with a label, e.g.:

#22_neck

Beware: no spaces admitted!!!
After the "#end" line (sections terminator) and before the "#START" line you can write everything (credits, copyrights etc.).
This is the basic structure of a ".shuf" file.

There are 5 more options:

- incremental operator "@": if this symbol come first of a number (no spaces admitted), it's intended as an increment (or decrement if negative) from the corresponding element of the section-1 list. It's a very powerful option, that can accelerate by much the design process. You can mix normal and incremental coordinates as you prefer.

- global translation and rotation: global rotation (#rotate item) will be executed first, then global translation (#translate), with no regard of their relative position in the input "*.shuf" file. They should be placed in the very first lines of the file, before "#start". Only one occurrence of each one is processed. The order of execution is: first X axis, then Y, then Z.

#rotate
0 12.0 43.5
#translate
25 27 -18.4
#start
...

- elliptical sections: "+circlexy", "+circlexz". The number of points must be the same of the other sections. Examples:
#start
+circlexy
43.1 55.6 28.0	(X, Y, Z of the center)
42.3 44.6 24	(semiaxis X, semiaxis Y, number of points)
...
...
#2
+circlexz
40.1 54.0 26.4	(X, Y, Z of the center)
42.3 44.6 24	(semiaxis X, semiaxis Z, number of points)
...
#end

N.B.: comments into parenthesis (or other symbols) not admitted, in the real file (at least in this version).
Incremental symbol "@" not admitted.

Design style tips: if you are working with a lot of incremental coord. (ex.: "@48.3"), could be a good idea to put sometimes a "neck", i.e. a whole section composed of absolute coordinates. This let you to control very carefully the shape in crucial points, avoiding excessive swelling or shrinking. This section is simple to arrange: apply <Save absolute SHuFFle> to the "*.shuf" file, then you can pick only the section you need and replace it in the original file.


==========================>>>>>> ".rot" file <<<<<<==========================

The "*.rot" file defines the relative rotations of the sections. It supports every type of rotation:
- rotations around an axis parallel to X, then parallel to Y, then parallel to Z.
In the next example, the sections are parallel to XZ plane:

#rotstart
8 0 0 0 0 0		(abs. x, y, z coord. of the fixed point, rotation rx, ry, rz)
#1
8 0 0 0 0 2
#2
9 0 0 0 0 4.5
#3
10 0 0 0 0 6.0
...
#rotend

Normally the x, y, z coord. of the pivot central point should be all "0", but in some cases could be useful to have them different than zero. The rotations are applied in this way: first rx, then ry, then rz.
The numbers after the "#" symbol should match with the similar numbers in the ".shuf" file (altough it's not mandatory). The number of sections can be equal or bigger than the ".shuf" file. Symbol "@" not admitted.
NOTE: the #rotstart-#rotend sequence can be included in a ".shuf" file, tipically at the end of #start-#end sequence. Rotfile must be choosen everyway, selecting the same "*.shuf" file for rotation too. The function of the <Rotfile On/Off> button is unaltered.


==========================>>>>>> Shuffle User Interface <<<<<<==========================

Buttons on the User Interface:

- "SHuFFle to Empty Polyhedron": can represents every shell you made; you can't do boolean operations with OpenSCAD, on this objects. When mixing +circle sections and classic sections (i.e. list of boundary points) be careful: if the starting point and/or the spatial direction of the points list don't correspond, the result will be embarrassing. This problem doesn't affect the "SHuFFle to Solid Hull" function, instead. The speed is another plus of this function.

- "Save Absolute SHuFFle": useful to extract sections of .shuf file (translated and rotated as requested) in absolute coordinates. Not affected by the RotFile button, but affected by #rotate and #translate directives.

- "SHuFFle to Solid Hull": can represents correctly only .shuf files vith convex boundary sections. If some sections aren't so, you can try to divide the file into two (or more) convex sections files. With the resulting object you can do boolean operations.

- "SHuFFle to Support Array": generates a .scad file that contains a Smart Support Array.

- "RotFile": ToggleButton that switch from linear creation style to curved style.



More accurate description of the "SHuFFle to Support Array" command:
the Support Array is the result of a geometric intersection() operation between the "empty_space()" (e.g. the input "*.shuf" file transformed in an OpenSCAD solid object) and an array of 20x20 mm universal supports. This empty_space() is the same generated by the "SHuFFle to Solid Hull" function.
The "empty_space()" hull will be in the beginning of the output file. That's the OpenSCAD version  of the provided ".shuf" file; this file should be in the "cream-puff" style: the bottom flat and parallel to X-Y plane, perimetral walls nearly vertical. This .shuf file represents the inner empty space of a thin shell, tipically.
This function is presented in a very early version, so you don't be surprised of strange results. In the "*_SA.scad" output file there's a numerical array filled with the heights of the columns that forms the support of the object to be printed: putting a zero each support can be disabled. The heights can be arranged manually to obtain an optimum.
The goal is to minimize the amount of support material needed in the printing of complex surfaces nearly parallel to the bed. The material saving can be up to 60-70%.
Important:
- The shuf file sections should be arranged to develop in the "y" axis.
- The lower face of the hull must be on the x-y plane, or parallel to it.

